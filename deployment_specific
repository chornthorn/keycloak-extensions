#!/bin/bash

set -e

# Configuration variables
KEYCLOAK_URL="http://localhost:8090"
CONTAINER_NAME="keycloak-extensions-playground"
MAX_HEALTH_CHECK_RETRIES=30
HEALTH_CHECK_INTERVAL=2  # seconds between health checks
MIN_JAVA_VERSION="17"
MIN_MVN_VERSION="3"

# Global variables for build tracking
declare -A build_status
declare -A build_times
declare -A build_start_times

# Check Java version
echo "Checking Java version..."
if ! command -v java &> /dev/null; then
    echo "‚ùå Java is not installed"
    exit 1
fi

CURRENT_JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
if [ "$CURRENT_JAVA_VERSION" -lt "$MIN_JAVA_VERSION" ]; then
    echo "‚ùå Java version too low. Required minimum version: $MIN_JAVA_VERSION, Found version: $CURRENT_JAVA_VERSION"
    exit 1
fi
echo "‚úÖ Java version $CURRENT_JAVA_VERSION verified (minimum required: $MIN_JAVA_VERSION)"

# Check Maven installation and version
echo "Checking Maven installation..."
if ! command -v mvn &> /dev/null; then
    echo "‚ùå Maven is not installed"
    exit 1
fi

CURRENT_MVN_VERSION=$(mvn -v | grep "Apache Maven" | cut -d' ' -f3 | cut -d'.' -f1)
if [ "$CURRENT_MVN_VERSION" -lt "$MIN_MVN_VERSION" ]; then
    echo "‚ùå Maven version too low. Required minimum version: $MIN_MVN_VERSION, Found version: $CURRENT_MVN_VERSION"
    exit 1
fi
echo "‚úÖ Maven version $CURRENT_MVN_VERSION verified (minimum required: $MIN_MVN_VERSION)"

# Check if Docker is running
echo "Checking Docker status..."
if ! docker info &> /dev/null; then
    echo "‚ùå Docker is not running"
    exit 1
fi
echo "‚úÖ Docker is running"

# Function to list directories with pom.xml
list_projects() {
    local count=1
    echo "Available projects:"
    echo "------------------------"
    for d in */; do
        if [ -f "${d}pom.xml" ]; then
            echo "[$count] ${d%/}"
            projects[$count]="${d}"
            ((count++))
        fi
    done
    echo "------------------------"
}

# Array to store project directories
declare -A projects

# List available projects
list_projects

# Prompt user for selection
while true; do
    read -p "Select project number to build (1-${#projects[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le "${#projects[@]}" ]; then
        dir="${projects[$selection]}"
        break
    else
        echo "‚ùå Invalid selection. Please enter a number between 1 and ${#projects[@]}"
    fi
done

echo "Selected project: üìÅ $dir"

echo "Step 1: Building JAR file..."
echo "Building directory: üìÅ $dir"

echo "\nStarting build process..."
if [[ ! $dir =~ ^\. ]]; then
    if [ -f "${dir}pom.xml" ]; then
        echo "\nüì¶ Building $dir..."
        echo "=========================="
        
        # Record build start time
        build_start_times["${dir%/}"]=$(date +%s)
        
        cd "$dir"
        mvn clean package
        build_result=$?
        
        # Calculate build duration
        build_end_time=$(date +%s)
        duration=$((build_end_time - build_start_times["${dir%/}"]))
        
        if [ $build_result -eq 0 ]; then
            echo "‚úÖ JAR build successful for $dir"
            build_status["${dir%/}"]="Success"
            build_times["${dir%/}"]="$(printf "%02d:%02d" $((duration/60)) $((duration%60)))"
        else
            echo "‚ùå JAR build failed for $dir"
            build_status["${dir%/}"]="Failed"
            build_times["${dir%/}"]="$(printf "%02d:%02d" $((duration/60)) $((duration%60)))"
            exit 1
        fi
        cd ..
        echo "==========================\n"
    else
        echo "‚ö†Ô∏è  Skipping $dir - no pom.xml found"
        build_status["${dir%/}"]="Skipped"
        build_times["${dir%/}"]="--:--"
        exit 1
    fi
fi

echo "Step 1.1: Build Summary"
echo "================================================================="
printf "%-30s | %-15s | %-15s | %-15s\n" "Module Name" "Status" "Build Time" "Timestamp"
echo "-----------------------------------------------------------------"
for module in "${!build_status[@]}"; do
    status_icon=""
    case ${build_status[$module]} in
        "Success") status_icon="‚úÖ";;
        "Failed") status_icon="‚ùå";;
        "Skipped") status_icon="‚ö†Ô∏è";;
    esac
    
    timestamp=$(date "+%H:%M:%S")
    printf "%-30s | %-15s | %-15s | %-15s\n" \
        "$module" \
        "$status_icon ${build_status[$module]}" \
        "${build_times[$module]}" \
        "$timestamp"
done
echo "================================================================="

echo "Step 2: Checking for existing containers..."
if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
    echo "Stopping existing $CONTAINER_NAME container..."
    docker compose down
    if [ $? -eq 0 ]; then
        echo "Successfully stopped existing containers"
    else
        echo "Failed to stop existing containers"
        exit 1
    fi
fi

echo "Step 3: Running Docker Compose..."
docker compose up -d
if [ $? -eq 0 ]; then
    echo "Docker Compose started successfully"
else
    echo "Docker Compose failed to start"
    exit 1
fi

echo "Step 4: Verifying container health..."
RETRY_COUNT=0

while [ $RETRY_COUNT -lt $MAX_HEALTH_CHECK_RETRIES ]; do
    if curl -s -f $KEYCLOAK_URL > /dev/null 2>&1; then
        echo "‚úÖ Keycloak is up and running at $KEYCLOAK_URL"
        break
    else
        echo "Waiting for Keycloak to be ready... (Attempt $((RETRY_COUNT+1))/$MAX_HEALTH_CHECK_RETRIES)"
        RETRY_COUNT=$((RETRY_COUNT+1))
        sleep $HEALTH_CHECK_INTERVAL
    fi
done

if [ $RETRY_COUNT -eq $MAX_HEALTH_CHECK_RETRIES ]; then
    echo "‚ùå Failed to verify Keycloak is running after $MAX_HEALTH_CHECK_RETRIES attempts"
    echo "Please check the logs using: docker compose logs"
    exit 1
fi

echo "‚úÖ Deployment process completed successfully üöÄ"
exit 0
